########################################
#
# 参考文献：http://www.blogfshare.com/aes-rijndael.html
#
#
#
############################################
# S盒 256长度的数组 使用一位数组进行存储 即SBOX[i][j] = SBOX[i*16+j]
# 对S盒的行优先存储
SBOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];
# 逆S盒 256长度的数组
INVSBOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]
# 扩展之后的子密钥 240长度的数组
RoundKey = [0x00] * 240


#######################################
# 字节替代 字节替代保证了AES算法的
# state:现在的状态值
# 输出：变化之后的state
#
# 高四位是行的索引 第四位是列的索引 取出SBOX中的值即可
# 又因为 SBOX[行索引][列索引] = SBOX[行索引*16+列索引] = SBOX[数字的值]
######################################
def SubBytes(state):
    for r in range(0, 4, 1):
        for c in range(0, 4, 1):
            state[r][c] = SBOX[state[r][c]]
    return state


##########################################
# 逆字节替代
#
#
#
#########################################
def InvSubBytes(state):
    for r in range(0, 4, 1):
        for c in range(0, 4, 1):
            state[r][c] = INVSBOX[state[r][c]]
    return state


#####################################
# 行移位变换
# state:当前的状态值
# 输出：变化之后的state
#
# 行移位之前：
# （1，1）（1，2）（1，3）（1，4）
# （2，1）（2，2）（2，3）（2，4）
# （3，1）（3，2）（3，3）（3，4）
# （4，1）（4，2）（4，3）（4，4）
#
# 行移位之后：
# （1，1）（1，2）（1，3）（1，4）
# （2，2）（2，3）（2，4）（2，1）
# （3，3）（3，4）（3，1）（3，2）
# （4，4）（4，1）（4，2）（4，3）
#####################################
def ShiftRows(state):
    temp = [0x00] * 4
    for r in range(0, 4, 1):
        for c in range(0, 4, 1):
            temp[c] = state[r][(r + c) % 4]
        for c in range(0, 4, 1):
            state[r][c] = temp[c]


####################################
# 逆行移位
#
#
#
#####################################
def InvShiftRows(state):
    temp = [0x00] * 4
    for r in range(0, 4, 1):
        for c in range(0, 4, 1):
            temp[c] = state[r][(c - r + 4) % 4];
    for c in range(0, 4, 1):
        state[r][c] = temp[c];
    return state


##########################################
# 有限域GF(256)上的乘法
# a：是一个0~255的值
# b：是一个0~255的值
#
# 参考文献：http://blog.csdn.net/bupt073114/article/details/27382533
#
#
##########################################
def FFmul(a, b):
    bw = [1, 1, 1, 1, 1, 1, 1, 1]
    res = 0;
    # bw[0] = 0x01*b     bw[4] = 0x10*b
    # bw[1] = 0x02*b     bw[5] = 0x20*b
    # bw[2] = 0x04*b     bw[6] = 0x40*b
    # bw[3] = 0x08*b     bw[7] = 0x80*b
    bw[0] = b;
    for i in range(1, 8, 1):  # 0x01 0x02 0x04 0x08
        bw[i] = bw[i - 1] << 1
        # 如果有进位的话 需要除以同余式 也就是亦或0x1b
        if (bw[i - 1] & 0x80 != 0):
            bw[i] = bw[i] ^ 0x1b
        bw[i] = bw[i] & 0xFF
    for i in range(0, 8, 1):
        if ((a >> i) & 0x01 != 0):
            res = res ^ bw[i]
    return res


#######################################
# 列混淆变换
# state:当前的状态
#
#    state = [
#        [0xd4,0xe0,0xb8,0x1e],
#        [0xbf,0xb4,0x41,0x27],
#        [0x5d,0x52,0x11,0x98],
#        [0x30,0xae,0xf1,0xe5]
#    ]
#
#    K = [
#        [0x02,0x03,0x01,0x01],
#        [0x01,0x02,0x03,0x01],
#        [0x01,0x01,0x02,0x03],
#        [0x03,0x01,0x01,0x02]
#    ]
#
#   state[0][0] = 0xd4*0x02 + 0xbf*0x03 + 0x5d*0x01 + 0x30*0x01
#   state[1][0] = 0xd4*0x01 + 0xbf*0x02 + 0x5d*0x03 + 0x30*0x01
#   ...
#   state[i][j] = K[i][k] * state[k][j]
#######################################
def MixColumns(state):
    t = [1, 1, 1, 1]
    for c in range(0, 4, 1):
        # t用来保存第c列的数据
        for r in range(0, 4, 1):
            t[r] = state[r][c]
        for r in range(0, 4, 1):
            # 在GF(256)中，加法就是异或运算
            state[r][c] = FFmul(0x02, t[r]) ^ FFmul(0x03, t[(r + 1) % 4]) ^ FFmul(0x01, t[(r + 2) % 4]) ^ FFmul(0x01, t[
                (r + 3) % 4])
    return state


######################################
# 逆列混淆
# state:当前的状态，是一个4*4的数组
#
#
######################################
def InvMixColumns(state):
    temp = [0x00, 0x00, 0x00, 0x00]
    for c in range(0, 4, 1):
        for r in range(0, 4, 1):
            temp[r] = state[r][c];
        for r in range(0, 4, 1):
            state[r][c] = FFmul(0x0e, temp[r]) ^ FFmul(0x0b, temp[(r + 1) % 4]) ^ FFmul(0x0d,
                                                                                        temp[(r + 2) % 4]) ^ FFmul(0x09,
                                                                                                                   temp[
                                                                                                                       (
                                                                                                                       r + 3) % 4])
    return state


#######################################
# 列混淆变换
# state:当前的状态
#
#    state = [
#        [0xd4,0xe0,0xb8,0x1e],
#        [0xbf,0xb4,0x41,0x27],
#        [0x5d,0x52,0x11,0x98],
#        [0x30,0xae,0xf1,0xe5]
#    ]
#
#    t = [
#        [0x02,0x03,0x01,0x01],
#        [0x01,0x02,0x03,0x01],
#        [0x01,0x01,0x02,0x03],
#        [0x03,0x01,0x01,0x02]
#    ]
#
#   列混淆之后就是 t 矩阵左乘 state
#######################################
def MixColumns2(state):
    t = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]
    res = [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
    for i in range(0, 4, 1):
        for j in range(0, 4, 1):
            for k in range(0, 4, 1):
                res[i][j] = res[i][j] ^ (FFmul(t[i][k], state[k][j]))
    return res


#######################################
# 列混淆变换
# state:当前的状态
#
#    state = [
#        [0xd4,0xe0,0xb8,0x1e],
#        [0xbf,0xb4,0x41,0x27],
#        [0x5d,0x52,0x11,0x98],
#        [0x30,0xae,0xf1,0xe5]
#    ]
#
#    t = [
#        [0x0E, 0x0B, 0x0D, 0x09],
#        [0x09, 0x0E, 0x0B, 0x0D],
#        [0x0D, 0x09, 0x0E, 0x0B],
#        [0x0B, 0x0D, 0x09, 0x0E]
#    ]
#
#   列混淆之后就是 t 矩阵左乘 state
#######################################
def InvMixColumns2(state):
    t = [
        [0x0E, 0x0B, 0x0D, 0x09],
        [0x09, 0x0E, 0x0B, 0x0D],
        [0x0D, 0x09, 0x0E, 0x0B],
        [0x0B, 0x0D, 0x09, 0x0E]
    ]
    res = [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
    for i in range(0, 4, 1):
        for j in range(0, 4, 1):
            for k in range(0, 4, 1):
                res[i][j] = res[i][j] ^ (FFmul(t[i][k], state[k][j]))
    return res


def printList(state):
    for arr in state:
        for num in arr:
            print("%#x " % (num), end='')
        print()
    print()


####################################
# 轮密钥加变换
# state:代表状态的4*4的二维数组
# round:本轮轮次
# 返回值：变化之后的state
#
# 将state和round key按位相异或
#
####################################
def AddRoundKey(state, round):
    for c in range(0, 4, 1):
        for r in range(0, 4, 1):
            state[r][c] = state[r][c] ^ RoundKey[round * 4 * 4 + c * 4 + r]
    return state


########################################
# 密钥扩展：每过一轮 都将密钥的长度增加分组长度
# key:原始密钥，一个16个字节（128位）的数组
#
#
# 对于第i轮扩展：
#   如果i不是4的倍数，K(i) = K(i-1)+K(i-4)
#   如果i是4的倍数，K(i) = K(i-4) + ByteRotate(SubByte(K(i-1))) + Rcon
#
#   key = [
#        2b 28 ab 09
#        7e ae f7 cf
#        15 d2 15 4f
#        16 a6 88 3c
#   ]
#
#   Rcon = [
#       0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36
#       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
#       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
#       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
#   ]
#   可以看出  异或Rcon只会使得
#
#
########################################
def KeyExpansion(key):
    #temp用来存放最后已经扩展出的key的最后一列
    temp = [0x00] * 4
    # 轮常量
    Rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
    # 第一轮密钥就是原始密钥
    for i in range(0, 4, 1):
        for j in range(0, 4, 1):
            RoundKey[i * 4 + j] = key[i * 4 + j]

    # 其他密钥均来源于上轮密钥
    # 从第4列到第43列，总共需要扩展40列 （40+4）* 4 =
    for i in range(4, 44, 1):
        # 每一组有四个字节
        for j in range(0, 4, 1):
            # 取轮密钥最后一列
            temp[j] = RoundKey[(i - 1) * 4 + j]
        # 如果是第4列 第8列 。。 则需要SubByte ShiftRow 在异或上Rcon
        if (i % 4 == 0):
            # 32位字中4字节循环左移一次
            swap = temp[0]
            temp[0] = temp[1]
            temp[1] = temp[2]
            temp[2] = temp[3]
            temp[3] = swap

            # S盒转换
            for k in range(0, 4, 1):
                temp[k] = SBOX[temp[k]]

            # 与Rcon异或
            temp[0] = temp[0] ^ Rcon[i / 4 - 1]
        # 最后和K（i-4）异或
        for k in range(0, 4, 1):
            RoundKey[i * 4 + k] = RoundKey[(i - 4) * 4 + k] ^ temp[k]
    return key


#####################################
# 加密算法
# import：一个16个字节（128位）的字符串
#
# 返回值：加密之后的密文
####################################
def cipher(input):
    # 加密过程的中的一个个状态 每一个值都是0~255
    state = [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]
    ];

    for r in range(0, 4, 1):
        for c in range(0, 4, 1):
            state[r][c] = input[c * 4 + r]

    # initial round，只需要完成AddRoundKey这一个步骤
    AddRoundKey(state, 0)
    # 第1轮到第9轮是四个步骤，分别是SubBytes ShiftRows MixColumns AddRoundKey
    # 第10轮是三个步骤，没有MixColumns
    for i in range(1, 11, 1):
        SubBytes(state)
        ShiftRows(state)
        if i != 10:
            MixColumns(state)
        AddRoundKey(state, i)

    for r in range(0, 4, 1):
        for c in range(0, 4, 1):
            input[c * 4 + r] = state[r][c];
    return input


if __name__ == "__main__":
    state = [
        [0xEA, 0x04, 0x65, 0x85],
        [0x83, 0x45, 0x5d, 0x96],
        [0x5c, 0x33, 0x98, 0xb0],
        [0xf0, 0x2d, 0xad, 0xc5]
    ]
    printList(state)
    state = SubBytes(state)
    printList(state)

    state = [
        [0xd4, 0xe0, 0xb8, 0x1e],
        [0xbf, 0xb4, 0x41, 0x27],
        [0x5d, 0x52, 0x11, 0x98],
        [0x30, 0xae, 0xf1, 0xe5]
    ]
    printList(state)
    state = MixColumns2(state)
    printList(state)

    key = [
        0x2b,0x28,0xab,0x09,
        0x7e,0xae,0xf7,0xcf,
        0x15,0xd2,0x15,0x4f,
        0x16,0xa6,0x88,0x3c
    ]

    key = KeyExpansion(key)
    printList(key)

